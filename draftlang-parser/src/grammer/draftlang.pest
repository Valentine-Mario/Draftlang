WHITESPACE= _{" "| "\t" | "\r"| "\n"}
COMMENT = _{ "#" ~ (!"\n" ~ ANY)* }

//verbs
verbs = {  "|>"| "!=" | ">=" | "<=" | ">"| "<" | "+" |  "&&" | "||" |  "=="}

reserver_words= {
    (
    "func" | "import" | "from"| "return" | "break" | "in" | 
    "if" | "else" | "elif"| "nil" | "true" | "false"|"import" | "and" | "or"
    | "draft" | "for"
    )
}

var_name= @{((ASCII_ALPHA|"_") ~ (ASCII_ALPHANUMERIC | "_")*)}

ident = @{ !(reserver_words ~ !ASCII_ALPHANUMERIC) ~ var_name}
ident2= @{ !(reserver_words ~ !ASCII_ALPHANUMERIC) ~ var_name}
number = @{
    "-"?
    ~ ("0"| ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
    ~ ("." ~ ASCII_DIGIT*)?
    ~ (^"e" ~ ("+"|"-")? ~ ASCII_DIGIT+)?
}
string = @{"\"" ~ inner ~ "\""}
inner = @{char*}
char = {
    !("\"" | "\\") ~ ANY
    | "\\" ~ ("\"" | "\\"| "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4,})
}

single_quote_string= @{"'" ~ single_inner ~ "'"}
single_inner = @{single_quote_char*}
single_quote_char = {
    |!("\'"| "\\") ~ ANY
    | "\\" ~ ("'" | "\\"| "/" | "b" | "f" | "n" | "r" | "t")
    | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4,})
}

boolean = {"true"| "false"}
null = {"nil"}
array= {
    "["~"]" | "[" ~ (types | ident ) ~ ("," ~ (types|ident))* ~ ","? ~"]"
}

map_item= {
    (string|single_quote_string) ~ ":" ~ (ident|types)
}
map = {
    "%{"~"}"|"%{" ~ map_item ~ 
    ("," ~ map_item)* ~ ","? ~ "}"
}

module_call = {ident ~ "::" ~ ident}

//valid draflang types
types = { 
    number 
    | string 
    | boolean 
    | array 
    | single_quote_string
    | map
    | null
  }

//var expression
assignment = {ident ~ "=" ~ (types|ident)}
assign_func = {ident ~ "=" ~ func_call}
global_assignment = {ident ~ "=" ~ types}


//inline expression
inline_expr = {assign_func | func_call | return_statement | for_loop | if_statement}


//import expression
import_stat= {"import" ~ ident ~ ("," ~ ident)* ~ "from" ~  module_call }

//function expression
return_statement = {"return" ~ (ident | types)}

//code block
block = { inline_expr|types|assignment}

//function
func_param = {"(" ~ ")" | "(" ~ (ident|types) ~ ("," ~ (ident|types))* ~ ")"}
func_expression = {
        "func" ~ ident ~ 
        func_param ~ "{" ~ (block)* ~ "}"
                }

func_signature = {ident ~ func_param}
func_call = {func_signature ~ ("|>" ~ func_signature)*}

//for loop
for_loop = {"for" ~ ident ~ "," ~ ident ~ "in" ~ (ident|types) ~ 
        "{" ~ (block)* ~ 
            "}" }



//if expression
cond_type = {"and" | "or"}
cond_expr = { ident | func_call | types}
cond = { (cond_expr ~ verbs ~ cond_expr) | cond_expr}
cond_statement = {"(" ~ cond ~ (cond_type ~ cond)* ~ ")"}
if_statement = {"if" ~ cond_statement ~ "{" ~ (block)* ~ "}" ~ else_if_statement* ~ else_statement?}
else_if_statement = {"elif" ~ cond_statement ~ "{" ~ (block)* ~ "}"}
else_statement = {"else" ~ "{" ~ (block)* ~ "}"}


//expressions
expr = {global_assignment|import_stat|func_expression}
json_object = { 
    "{" ~ "}" | "{" ~ json_pair ~ ("," ~ json_pair)* ~ "}"
}
json_pair= {string ~ ":" ~ string}


draft_lang = {json_object? ~ "[draft]" ~ expr* ~ "[draft]" ~ json_object? }
program= _{ SOI ~ draft_lang ~ EOI}